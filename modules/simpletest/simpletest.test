<?php
// $Id: simpletest.test,v 1.1.2.17 2009/11/06 21:23:32 boombatower Exp $
// Core: Id: simpletest.test,v 1.31 2009/09/01 17:40:27 webchick Exp

/**
 * @file
 * Backport of Drupal 7 simpletest.test with modifications, see BACKPORT.txt.
 *
 * Copyright 2008-2009 by Jimmy Berry ("boombatower", http://drupal.org/user/214218)
 */

class SimpleTestFunctionalTest extends DrupalWebTestCase {
  /**
   * The results array that has been parsed by getTestResults().
   */
  protected $childTestResults;

  /**
   * Store the test ID from each test run for comparison, to ensure they are
   * incrementing.
   */
  protected $test_ids = array();

  public static function getInfo() {
    return array(
      'name' => 'SimpleTest functionality',
      'description' => 'Test SimpleTest\'s web interface: check that the intended tests were
                          run and ensure that test reports display the intended results. Also
                          test SimpleTest\'s internal browser and API\'s both explicitly and
                          implicitly.',
      'group' => 'SimpleTest'
    );
  }

  function setUp() {
    if (!$this->inCURL()) {
      parent::setUp('simpletest');

      // Create and login user
      $admin_user = $this->drupalCreateUser(array('administer unit tests'));
      $this->drupalLogin($admin_user);
    }
    else {
      parent::setUp();
    }
  }

  /**
   * Test the internal browsers functionality.
   */
  function testInternalBrowser() {
    global $conf;
    if (!$this->inCURL()) {
      $this->drupalGet('node');
      $this->assertTrue($this->drupalGetHeader('Date'), t('An HTTP header was received.'));
//      $this->assertTitle(t('Welcome to @site-name | @site-name', array('@site-name' => variable_get('site_name', 'Drupal'))), t('Site title matches.'));
      $this->assertTitle(variable_get('site_name', 'Pressflow'), t('Site title matches.'));
      $this->assertNoTitle('Foo', t('Site title does not match.'));
      // Make sure that we are locked out of the installer when prefixing
      // using the user-agent header. This is an important security check.
      global $base_url;

      $this->drupalGet($base_url . '/install.php', array('external' => TRUE));
      $this->assertResponse(403, 'Cannot access install.php with a "simpletest" user-agent header.');

      $this->drupalLogin($this->drupalCreateUser());
      $headers = $this->drupalGetHeaders(TRUE);
      $this->assertEqual(count($headers), 2, t('There was one intermediate request.'));
      $this->assertTrue(strpos($headers[0][':status'], '302') !== FALSE, t('Intermediate response code was 302.'));
      $this->assertFalse(empty($headers[0]['location']), t('Intermediate request contained a Location header.'));
      $this->assertEqual($this->getUrl(), $headers[0]['location'], t('HTTP redirect was followed'));
      $this->assertFalse($this->drupalGetHeader('Location'), t('Headers from intermediate request were reset.'));
      $this->assertResponse(200, t('Response code from intermediate request was reset.'));
    }
  }

  /**
   * Make sure that tests selected through the web interface are run and
   * that the results are displayed correctly.
   */
  function testWebTestRunner() {
    $this->pass = t('SimpleTest pass.');
    $this->fail = t('SimpleTest fail.');
    $this->valid_permission = 'access content';
    $this->invalid_permission = 'invalid permission';

    if ($this->inCURL()) {
      // Only run following code if this test is running itself through a CURL request.
      $this->stubTest();
    }
    else {

      // Run twice so test_ids can be accumulated.
      for ($i = 0; $i < 2; $i++) {
        // Run this test from web interface.
//        $this->drupalGet('admin/config/development/testing');
        $this->drupalGet('admin/build/testing');

        $edit = array();
        $edit['SimpleTestFunctionalTest'] = TRUE;
        $this->drupalPost(NULL, $edit, t('Run tests'));

        // Parse results and confirm that they are correct.
        $this->getTestResults();
        $this->confirmStubTestResults();
      }

      // Regression test for #290316.
      // Check that test_id is incrementing.
      $this->assertTrue($this->test_ids[0] != $this->test_ids[1], t('Test ID is incrementing.'));
    }
  }

  /**
   * Test to be run and the results confirmed.
   */
  function stubTest() {
    $this->pass($this->pass);
    $this->fail($this->fail);

    $this->drupalCreateUser(array($this->valid_permission));
    $this->drupalCreateUser(array($this->invalid_permission));

    $this->pass(t('Test ID is @id.', array('@id' => $this->testId)));

    // Generates a warning.
    $i = 1 / 0;

    // Call an assert function specific to that class.
    $this->assertNothing();

    // Generates a warning inside a PHP function.
    array_key_exists(NULL, NULL);

    debug('Foo', 'Debug');
  }

  /**
   * Assert nothing.
   */
  function assertNothing() {
    $this->pass("This is nothing.");
  }

  /**
   * Confirm that the stub test produced the desired results.
   */
  function confirmStubTestResults() {
    $this->assertAssertion($this->pass, 'Other', 'Pass', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
    $this->assertAssertion($this->fail, 'Other', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');

    $this->assertAssertion(t('Created permissions: @perms', array('@perms' => $this->valid_permission)), 'Role', 'Pass', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');
    $this->assertAssertion(t('Invalid permission %permission.', array('%permission' => $this->invalid_permission)), 'Role', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');

    // Check that a warning is catched by simpletest.
    $this->assertAssertion('Division by zero', 'Warning', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');

    // Check that the backtracing code works for specific assert function.
    $this->assertAssertion('This is nothing.', 'Other', 'Pass', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');

    // Check that errors that occur inside PHP internal functions are correctly reported.
    // The exact error message differs between PHP versions so we check only
    // the function name 'array_key_exists'.
    $this->assertAssertion('array_key_exists', 'Warning', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');

    $this->assertAssertion("Debug: 'Foo'", 'Debug', 'Fail', 'simpletest.test', 'SimpleTestFunctionalTest->stubTest()');

//    $this->assertEqual('6 passes, 2 fails, 2 exceptions, and 1 debug message', $this->childTestResults['summary'], 'Stub test summary is correct');
    $this->assertEqual('8 passes, 2 fails, 2 exceptions, and 1 debug message', $this->childTestResults['summary'], 'Stub test summary is correct');

    $this->test_ids[] = $test_id = $this->getTestIdFromResults();
    $this->assertTrue($test_id, t('Found test ID in results.'));
  }

  /**
   * Fetch the test id from the test results.
   */
  function getTestIdFromResults() {
    foreach ($this->childTestResults['assertions'] as $assertion) {
      if (preg_match('@^Test ID is ([0-9]*)\.$@', $assertion['message'], $matches)) {
        return $matches[1];
      }
    }
    return NULL;
  }

  /**
   * Assert that an assertion with the specified values is displayed
   * in the test results.
   *
   * @param string $message Assertion message.
   * @param string $type Assertion type.
   * @param string $status Assertion status.
   * @param string $file File where the assertion originated.
   * @param string $functuion Function where the assertion originated.
   * @return Assertion result.
   */
  function assertAssertion($message, $type, $status, $file, $function) {
    $message = trim(strip_tags($message));
    $found = FALSE;
    foreach ($this->childTestResults['assertions'] as $assertion) {
      if ((strpos($assertion['message'], $message) !== FALSE) &&
          $assertion['type'] == $type &&
          $assertion['status'] == $status &&
          $assertion['file'] == $file &&
          $assertion['function'] == $function) {
        $found = TRUE;
        break;
      }
    }
    return $this->assertTrue($found, t('Found assertion {"@message", "@type", "@status", "@file", "@function"}.', array('@message' => $message, '@type' => $type, '@status' => $status, "@file" => $file, "@function" => $function)));
  }

  /**
   * Get the results from a test and store them in the class array $results.
   */
  function getTestResults() {
    $results = array();
    if ($this->parse()) {
      if ($fieldset = $this->getResultFieldSet()) {
        // Code assumes this is the only test in group.
        $results['summary'] = $this->asText($fieldset->div[1]);
        $results['name'] = $this->asText($fieldset->legend);

        $results['assertions'] = array();
        $tbody = $fieldset->table->tbody;
        foreach ($tbody->tr as $row) {
          $assertion = array();
          $assertion['message'] = $this->asText($row->td[0]);
          $assertion['type'] = $this->asText($row->td[1]);
          $assertion['file'] = $this->asText($row->td[2]);
          $assertion['line'] = $this->asText($row->td[3]);
          $assertion['function'] = $this->asText($row->td[4]);
//          $ok_url = file_create_url('misc/watchdog-ok.png');
          $ok_url = '/misc/watchdog-ok.png';
          $assertion['status'] = ($row->td[5]->img['src'] == $ok_url) ? 'Pass' : 'Fail';
          $results['assertions'][] = $assertion;
        }
      }
    }
    $this->childTestResults = $results;
  }

  /**
   * Get the fieldset containing the results for group this test is in.
   *
   * @return fieldset containing the results for group this test is in.
   */
  function getResultFieldSet() {
    $fieldsets = $this->xpath('//fieldset');
    $info = $this->getInfo();
    foreach ($fieldsets as $fieldset) {
      if ($this->asText($fieldset->legend) == $info['name']) {
        return $fieldset;
      }
    }
    return FALSE;
  }

  /**
   * Extract the text contained by the element.
   *
   * @param $element
   *   Element to extract text from.
   * @return
   *   Extracted text.
   */
  function asText(SimpleXMLElement $element) {
    if (!is_object($element)) {
      return $this->fail('The element is not an element.');
    }
    return trim(html_entity_decode(strip_tags($element->asXML())));
  }

  /**
   * Check if the test is being run from inside a CURL request.
   *
   * @return The test is being run from inside a CURL request.
   */
  function inCURL() {
    return isset($_SERVER['HTTP_USER_AGENT']) && preg_match("/^simpletest\d+/", $_SERVER['HTTP_USER_AGENT']);
  }
}

class SimpleTestMailCaptureTestCase extends DrupalWebTestCase {
  /**
   * Implement getInfo().
   */
  public static function getInfo() {
    return array(
      'name' => 'SimpleTest e-mail capturing',
      'description' => 'Test the SimpleTest e-mail capturing logic, the assertMail assertion and the drupalGetMails function.',
      'group' => 'SimpleTest',
    );
  }

  /**
   * Test to see if the wrapper function is executed correctly.
   */
  function testMailSend() {
    // Create an e-mail.
    $subject = $this->randomString(64);
    $body = $this->randomString(128);
    $message = array(
      'id' => 'drupal_mail_test',
      'headers' => array('Content-type'=> 'text/html'),
      'subject' => $subject,
      'to' => 'foobar@example.com',
      'body' => $body,
    );

    // Before we send the e-mail, drupalGetMails should return an empty array.
    $captured_emails = $this->drupalGetMails();
    $this->assertEqual(count($captured_emails), 0, t('The captured e-mails queue is empty.'), t('E-mail'));

    // Send the e-mail.
//    $response = drupal_mail_sending_system('simpletest', 'drupal_mail_test')->mail($message);
    $response = drupal_mail('simpletest', 'drupal_mail_test', $message['to'], language_default(), $message, NULL, TRUE);

    // Ensure that there is one e-mail in the captured e-mails array.
    $captured_emails = $this->drupalGetMails();
    $this->assertEqual(count($captured_emails), 1, t('One e-mail was captured.'), t('E-mail'));

    // Assert that the e-mail was sent by iterating over the message properties
    // and ensuring that they are captured intact.
    foreach($message as $field => $value) {
      $this->assertMail($field, $value, t('The e-mail was sent and the value for property @field is intact.', array('@field' => $field)), t('E-mail'));
    }

    // Send additional e-mails so more than one e-mail is captured.
    for ($index = 0; $index < 5; $index++) {
      $message = array(
        'id' => 'drupal_mail_test_' . $index,
        'headers' => array('Content-type'=> 'text/html'),
        'subject' => $this->randomString(64),
        'to' => $this->randomName(32) . '@example.com',
        'body' => $this->randomString(512),
      );
//      drupal_mail_sending_system('drupal_mail_test', $index)->mail($message);
      $response = drupal_mail('simpletest', 'drupal_mail_test', $message['to'], language_default(), $message, NULL, TRUE);
    }

    // There should now be 6 e-mails captured.
    $captured_emails = $this->drupalGetMails();
    $this->assertEqual(count($captured_emails), 6, t('All e-mails were captured.'), t('E-mail'));

    // Test different ways of getting filtered e-mails via drupalGetMails().
    $captured_emails = $this->drupalGetMails(array('id' => 'drupal_mail_test'));
    $this->assertEqual(count($captured_emails), 1, t('Only one e-mail is returned when filtering by id.'), t('E-mail'));
    $captured_emails = $this->drupalGetMails(array('id' => 'drupal_mail_test', 'subject' => $subject));
    $this->assertEqual(count($captured_emails), 1, t('Only one e-mail is returned when filtering by id and subject.'), t('E-mail'));
    $captured_emails = $this->drupalGetMails(array('id' => 'drupal_mail_test', 'subject' => $subject, 'from' => 'this_was_not_used@example.com'));
    $this->assertEqual(count($captured_emails), 0, t('No e-mails are returned when querying with an unused from address.'), t('E-mail'));

    // Send the last e-mail again, so we can confirm that the drupalGetMails-filter
    // correctly returns all e-mails with a given property/value.
//    drupal_mail_sending_system('drupal_mail_test', $index)->mail($message);
    $response = drupal_mail('simpletest', $index, $message['to'], language_default(), $message, NULL, TRUE);
    $captured_emails = $this->drupalGetMails(array('id' => 'drupal_mail_test_4'));
    $this->assertEqual(count($captured_emails), 2, t('All e-mails with the same id are returned when filtering by id.'), t('E-mail'));
  }
}

