<?php

/**
 * Implementation of hook_help().
 */
function color_help($path, $arg) {
  switch ($path) {
    case 'admin/help#color':
      $output = '<p>'. t('The color module allows a site administrator to quickly and easily change the color scheme of certain themes. Although not all themes support color module, both Garland (the default theme) and Minnelli were designed to take advantage of its features. By using color module with a compatible theme, you can easily change the color of links, backgrounds, text, and other theme elements. Color module requires that your <a href="@url">file download method</a> be set to public.', array('@url' => url('admin/settings/file-system'))) .'</p>';
      $output .= '<p>'. t("It is important to remember that color module saves a modified copy of the theme's specified stylesheets in the files directory. This means that if you make any manual changes to your theme's stylesheet, you must save your color settings again, even if they haven't changed. This causes the color module generated version of the stylesheets in the files directory to be recreated using the new version of the original file.") .'</p>';
      $output .= '<p>'. t('To change the color settings for a compatible theme, select the "configure" link for the theme on the <a href="@themes">themes administration page</a>.', array('@themes' => url('admin/build/themes'))) .'</p>';
      $output .= '<p>'. t('For more information, see the online handbook entry for <a href="@color">Color module</a>.', array('@color' => 'http://drupal.org/handbook/modules/color/')) .'</p>';
      return $output;
  }
}

/**
 * Implementation of hook_theme().
 */
function color_theme() {
  return array(
    'color_scheme_form' => array(
      'arguments' => array('form' => NULL),
    ),
  );
}

/**
 * Implementation of hook_form_alter().
 */
function color_form_alter(&$form, $form_state, $form_id) {
  // Insert the color changer into the theme settings page.
  if ($form_id == 'system_theme_settings' && color_get_info(arg(4)) && function_exists('gd_info')) {
    if (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) != FILE_DOWNLOADS_PUBLIC) {
      // Disables the color changer when the private download method is used.
      // TODO: This should be solved in a different way. See issue #181003.
      drupal_set_message(t('The color picker only works if the <a href="@url">download method</a> is set to public.', array('@url' => url('admin/settings/file-system'))), 'warning');
    }
    else {
      $form['color'] = array(
        '#type' => 'fieldset',
        '#title' => t('Color scheme'),
        '#weight' => -1,
        '#attributes' => array('id' => 'color_scheme_form'),
        '#theme' => 'color_scheme_form',
      );
      $form['color'] += color_scheme_form($form_state, arg(4));
      $form['#validate'][] = 'color_scheme_form_validate';
      $form['#submit'][] = 'color_scheme_form_submit';
    }
  }

  // Use the generated screenshot in the theme list.
  if ($form_id == 'system_theme_select_form' || $form_id == 'system_themes') {
    $themes = list_themes();
    foreach (element_children($form) as $theme) {
      if ($screenshot = variable_get('color_'. $theme .'_screenshot', NULL)) {
        if (isset($form[$theme]['screenshot'])) {
          $form[$theme]['screenshot']['#value'] = theme('image', $screenshot, '', '', array('class' => 'screenshot'), FALSE);
        }
      }
    }
  }
}

/**
 * Callback for the theme to alter the resources used.
 */
function _color_page_alter(&$vars) {
  global $language, $theme_key;

  // Override stylesheets.
  $color_paths = variable_get('color_'. $theme_key .'_stylesheets', array());
  if (!empty($color_paths)) {
    // Loop over theme CSS files and try to rebuild CSS array with rewritten
    // stylesheets. Keep the orginal order intact for CSS cascading.
    $new_theme_css = array();

    foreach ($vars['css']['all']['theme'] as $old_path => $old_preprocess) {
      // Add the non-colored stylesheet first as we might not find a
      // re-colored stylesheet for replacement later.
      $new_theme_css[$old_path] = $old_preprocess;

      // Loop over the path array with recolored CSS files to find matching
      // paths which could replace the non-recolored paths.
      foreach ($color_paths as $color_path) {
        // Color module currently requires unique file names to be used,
        // which allows us to compare different file paths.
        if (basename($old_path) == basename($color_path)) {
          // Pull out the non-colored and add rewritten stylesheet.
          unset($new_theme_css[$old_path]);
          $new_theme_css[$color_path] = $old_preprocess;

          // If the current language is RTL and the CSS file had an RTL variant,
          // pull out the non-colored and add rewritten RTL stylesheet.
          if ($language->direction == LANGUAGE_RTL) {
            $rtl_old_path = str_replace('.css', '-rtl.css', $old_path);
            $rtl_color_path = str_replace('.css', '-rtl.css', $color_path);
            if (file_exists($rtl_color_path)) {
              unset($new_theme_css[$rtl_old_path]);
              $new_theme_css[$rtl_color_path] = $old_preprocess;
            }
          }
          break;
        }
      }
    }
    $vars['css']['all']['theme'] = $new_theme_css;
    $vars['styles'] = drupal_get_css($vars['css']);
  }

  // Override logo.
  $logo = variable_get('color_'. $theme_key .'_logo', NULL);
  if ($logo && $vars['logo'] && preg_match('!'. $theme_key .'/logo.png$!', $vars['logo'])) {
    $vars['logo'] = base_path() . $logo;
  }
}

/**
 * Retrieve the color.module info for a particular theme.
 */
function color_get_info($theme) {
  $path = drupal_get_path('theme', $theme);
  $file = $path .'/color/color.inc';
  if ($path && file_exists($file)) {
    include $file;
    return $info;
  }
}

/**
 * Helper function to retrieve the color palette for a particular theme.
 */
function color_get_palette($theme, $default = false) {
  // Fetch and expand default palette
  $fields = array('base', 'link', 'top', 'bottom', 'text');
  $info = color_get_info($theme);
  $keys = array_keys($info['schemes']);
  foreach (explode(',', array_shift($keys)) as $k => $scheme) {
    $palette[$fields[$k]] = $scheme;
  }

  // Load variable
  return $default ? $palette : variable_get('color_'. $theme .'_palette', $palette);
}

/**
 * Form callback. Returns the configuration form.
 */
function color_scheme_form(&$form_state, $theme) {
  $base = drupal_get_path('module', 'color');
  $info = color_get_info($theme);

  // Add Farbtastic color picker
  drupal_add_css('misc/farbtastic/farbtastic.css', 'module', 'all', FALSE);
  drupal_add_js('misc/farbtastic/farbtastic.js');

  // Add custom CSS/JS
  drupal_add_css($base .'/color.css', 'module', 'all', FALSE);
  drupal_add_js($base .'/color.js');
  drupal_add_js(array('color' => array(
    'reference' => color_get_palette($theme, true)
  )), 'setting');

  // See if we're using a predefined scheme
  $current = implode(',', variable_get('color_'. $theme .'_palette', array()));
  // Note: we use the original theme when the default scheme is chosen.
  $current = isset($info['schemes'][$current]) ? $current : ($current == '' ? reset($info['schemes']) : '');

  // Add scheme selector
  $info['schemes'][''] = t('Custom');
  $form['scheme'] = array(
    '#type' => 'select',
    '#title' => t('Color set'),
    '#options' => $info['schemes'],
    '#default_value' => $current,
  );

  // Add palette fields
  $palette = color_get_palette($theme);
  $names = array(
    'base' => t('Base color'),
    'link' => t('Link color'),
    'top' => t('Header top'),
    'bottom' => t('Header bottom'),
    'text' => t('Text color')
  );
  $form['palette']['#tree'] = true;
  foreach ($palette as $name => $value) {
    $form['palette'][$name] = array(
      '#type' => 'textfield',
      '#title' => $names[$name],
      '#default_value' => $value,
      '#size' => 8,
    );
  }
  $form['theme'] = array('#type' => 'value', '#value' => arg(4));
  $form['info'] = array('#type' => 'value', '#value' => $info);

  return $form;
}

/**
 * Theme color form.
 *
 * @ingroup themeable
 */
function theme_color_scheme_form($form) {
  // Include stylesheet
  $theme = $form['theme']['#value'];
  $info = $form['info']['#value'];
  $path = drupal_get_path('theme', $theme) .'/';
  drupal_add_css($path . $info['preview_css']);
  $output = '';
  // Wrapper
  $output .= '<div class="color-form clear-block">';

  // Color schemes
  $output .= drupal_render($form['scheme']);

  // Palette
  $output .= '<div id="palette" class="clear-block">';
  foreach (element_children($form['palette']) as $name) {
    $output .= drupal_render($form['palette'][$name]);
  }
  $output .= '</div>';

  // Preview
  $output .= drupal_render($form);
  $output .= '<h2>'. t('Preview') .'</h2>';
  $output .= '<div id="preview"><div id="text"><h2>Lorem ipsum dolor</h2><p>Sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud <a href="#">exercitation ullamco</a> laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p></div><div id="img" style="background-image: url('. base_path() . $path . $info['preview_image'] .')"></div></div>';

  // Close wrapper
  $output .= '</div>';

  return $output;
}

/**
 * Validation handler for color change form.
 */
function color_scheme_form_validate($form, &$form_state) {
  // Only accept hexadecimal CSS color strings to avoid XSS upon use.
  foreach ($form_state['values']['palette'] as $key => $color) {
    if (!preg_match('/^#([a-f0-9]{3}){1,2}$/iD', $color)) {
      form_set_error('palette][' . $key, t('%name must be a valid hexadecimal CSS color value.', array('%name' => $form['color']['palette'][$key]['#title'])));
    }
  }
}

/**
 * Submit handler for color change form.
 */
function color_scheme_form_submit($form, &$form_state) {
  // Get theme coloring info
  if (!isset($form_state['values']['info'])) {
    return;
  }
  $theme = $form_state['values']['theme'];
  $info = $form_state['values']['info'];

  // Resolve palette
  $palette = $form_state['values']['palette'];
  if ($form_state['values']['scheme'] != '') {
    $scheme = explode(',', $form_state['values']['scheme']);
    foreach ($palette as $k => $color) {
      $palette[$k] = array_shift($scheme);
    }
  }

  // Make sure enough memory is available, if PHP's memory limit is compiled in.
  if (function_exists('memory_get_usage')) {
    // Fetch source image dimensions.
    $source = drupal_get_path('theme', $theme) .'/'. $info['base_image'];
    list($width, $height) = getimagesize($source);

    // We need at least a copy of the source and a target buffer of the same
    // size (both at 32bpp).
    $required = $width * $height * 8;
    $usage = memory_get_usage();
    $limit = parse_size(ini_get('memory_limit'));
    if ($usage + $required > $limit) {
      drupal_set_message(t('There is not enough memory available to PHP to change this theme\'s color scheme. You need at least %size more. Check the <a href="@url">PHP documentation</a> for more information.', array('%size' => format_size($usage + $required - $limit), '@url' => 'http://www.php.net/manual/en/ini.core.php#ini.sect.resource-limits')), 'error');
      return;
    }
  }

  // Delete old files
  foreach (variable_get('color_'. $theme .'_files', array()) as $file) {
    @unlink($file);
  }
  if (isset($file) && $file = dirname($file)) {
    @rmdir($file);
  }

  // Don't render the default colorscheme, use the standard theme instead.
  if (implode(',', color_get_palette($theme, true)) == implode(',', $palette)
    || $form_state['values']['op'] == t('Reset to defaults')) {
    variable_del('color_'. $theme .'_palette');
    variable_del('color_'. $theme .'_stylesheets');
    variable_del('color_'. $theme .'_logo');
    variable_del('color_'. $theme .'_files');
    variable_del('color_'. $theme .'_screenshot');
    return;
  }

  // Prepare target locations for generated files.
  $id = $theme .'-'. substr(md5(serialize($palette) . microtime()), 0, 8);
  $paths['color'] = file_directory_path() .'/color';
  $paths['target'] = $paths['color'] .'/'. $id;
  foreach ($paths as $path) {
    file_check_directory($path, FILE_CREATE_DIRECTORY);
  }
  $paths['target'] = $paths['target'] .'/';
  $paths['id'] = $id;
  $paths['source'] = drupal_get_path('theme', $theme) .'/';
  $paths['files'] = $paths['map'] = array();

  // Save palette and logo location.
  variable_set('color_'. $theme .'_palette', $palette);
  variable_set('color_'. $theme .'_logo', $paths['target'] .'logo.png');

  // Copy over neutral images.
  foreach ($info['copy'] as $file) {
    $base = basename($file);
    $source = $paths['source'] . $file;
    file_copy($source, $paths['target'] . $base);
    $paths['map'][$file] = $base;
    $paths['files'][] = $paths['target'] . $base;
  }

  // Render new images, if image provided.
  if ($info['base_image']) {
    _color_render_images($theme, $info, $paths, $palette);
  }

  // Rewrite theme stylesheets.
  $css = array();
  foreach ($info['css'] as $stylesheet) {
    // Build a temporary array with LTR and RTL files.
    $files = array();
    if (file_exists($paths['source'] . $stylesheet)) {
      $files[] = $stylesheet;

      $rtl_file = str_replace('.css', '-rtl.css', $stylesheet);
      if (file_exists($paths['source'] . $rtl_file)) {
        $files[] = $rtl_file;
      }
    }

    foreach ($files as $file) {
      // Aggregate @imports recursively for each configured top level CSS file
      // without optimization. Aggregation and optimization will be
      // handled by drupal_build_css_cache() only.
      $style = drupal_load_stylesheet($paths['source'] . $file, FALSE);

      // Return the path to where this CSS file originated from, stripping
      // off the name of the file at the end of the path.
      $base = base_path() . dirname($paths['source'] . $file) .'/';
      _drupal_build_css_path(NULL, $base);

      // Prefix all paths within this CSS file, ignoring absolute paths.
      $style = preg_replace_callback('/url\([\'"]?(?![a-z]+:|\/+)([^\'")]+)[\'"]?\)/i', '_drupal_build_css_path', $style);

      // Rewrite stylesheet with new colors.
      $style = _color_rewrite_stylesheet($theme, $info, $paths, $palette, $style);
      $base_file = basename($file);
      $css[] = $paths['target'] . $base_file;
      _color_save_stylesheet($paths['target'] . $base_file, $style, $paths);
    }
  }

  // Maintain list of files.
  variable_set('color_'. $theme .'_stylesheets', $css);
  variable_set('color_'. $theme .'_files', $paths['files']);
}

/**
 * Rewrite the stylesheet to match the colors in the palette.
 */
function _color_rewrite_stylesheet($theme, &$info, &$paths, $palette, $style) {
  $themes = list_themes();

  // Prepare color conversion table
  $conversion = $palette;
  unset($conversion['base']);
  foreach ($conversion as $k => $v) {
    $conversion[$k] = drupal_strtolower($v);
  }
  $default = color_get_palette($theme, true);

  // Split off the "Don't touch" section of the stylesheet.
  $split = "Color Module: Don't touch";
  if (strpos($style, $split) !== FALSE) {
    list($style, $fixed) = explode($split, $style);
  }

  // Find all colors in the stylesheet and the chunks in between.
  $style = preg_split('/(#[0-9a-f]{6}|#[0-9a-f]{3})/i', $style, -1, PREG_SPLIT_DELIM_CAPTURE);
  $is_color = false;
  $output = '';
  $base = 'base';

  // Iterate over all parts.
  foreach ($style as $chunk) {
    if ($is_color) {
      $chunk = drupal_strtolower($chunk);
      // Check if this is one of the colors in the default palette.
      if ($key = array_search($chunk, $default)) {
        $chunk = $conversion[$key];
      }
      // Not a pre-set color. Extrapolate from the base.
      else {
        $chunk = _color_shift($palette[$base], $default[$base], $chunk, $info['blend_target']);
      }
    }
    else {
      // Determine the most suitable base color for the next color.

      // 'a' declarations. Use link.
      if (preg_match('@[^a-z0-9_-](a)[^a-z0-9_-][^/{]*{[^{]+$@i', $chunk)) {
        $base = 'link';
      }
      // 'color:' styles. Use text.
      else if (preg_match('/(?<!-)color[^{:]*:[^{#]*$/i', $chunk)) {
        $base = 'text';
      }
      // Reset back to base.
      else {
        $base = 'base';
      }
    }
    $output .= $chunk;
    $is_color = !$is_color;
  }
  // Append fixed colors segment.
  if (isset($fixed)) {
    $output .= $fixed;
  }

  // Replace paths to images.
  foreach ($paths['map'] as $before => $after) {
    $before = base_path() . $paths['source'] . $before;
    $before = preg_replace('`(^|/)(?!../)([^/]+)/../`', '$1', $before);
    $output = str_replace($before, $after, $output);
  }

  return $output;
}

/**
 * Save the rewritten stylesheet to disk.
 */
function _color_save_stylesheet($file, $style, &$paths) {

  // Write new stylesheet.
  file_save_data($style, $file, FILE_EXISTS_REPLACE);
  $paths['files'][] = $file;

  // Set standard file permissions for webserver-generated files.
  @chmod($file, 0664);
}

/**
 * Render images that match a given palette.
 */
function _color_render_images($theme, &$info, &$paths, $palette) {

  // Prepare template image.
  $source = $paths['source'] .'/'. $info['base_image'];
  $source = imagecreatefrompng($source);
  $width = imagesx($source);
  $height = imagesy($source);

  // Prepare target buffer.
  $target = imagecreatetruecolor($width, $height);
  imagealphablending($target, true);

  // Fill regions of solid color.
  foreach ($info['fill'] as $color => $fill) {
    imagefilledrectangle($target, $fill[0], $fill[1], $fill[0] + $fill[2], $fill[1] + $fill[3], _color_gd($target, $palette[$color]));
  }

  // Render gradient.
  for ($y = 0; $y < $info['gradient'][3]; ++$y) {
    $color = _color_blend($target, $palette['top'], $palette['bottom'], $y / ($info['gradient'][3] - 1));
    imagefilledrectangle($target, $info['gradient'][0], $info['gradient'][1] + $y, $info['gradient'][0] + $info['gradient'][2], $info['gradient'][1] + $y + 1, $color);
  }

  // Blend over template.
  imagecopy($target, $source, 0, 0, 0, 0, $width, $height);

  // Clean up template image.
  imagedestroy($source);

  // Cut out slices.
  foreach ($info['slices'] as $file => $coord) {
    list($x, $y, $width, $height) = $coord;
    $base = basename($file);
    $image = $paths['target'] . $base;

    // Cut out slice.
    if ($file == 'screenshot.png') {
      $slice = imagecreatetruecolor(150, 90);
      imagecopyresampled($slice, $target, 0, 0, $x, $y, 150, 90, $width, $height);
      variable_set('color_'. $theme .'_screenshot', $image);
    }
    else {
      $slice = imagecreatetruecolor($width, $height);
      imagecopy($slice, $target, 0, 0, $x, $y, $width, $height);
    }

    // Save image.
    imagepng($slice, $image);
    imagedestroy($slice);
    $paths['files'][] = $image;

    // Set standard file permissions for webserver-generated files
    @chmod(realpath($image), 0664);

    // Build before/after map of image paths.
    $paths['map'][$file] = $base;
  }

  // Clean up target buffer.
  imagedestroy($target);
}

/**
 * Shift a given color, using a reference pair and a target blend color.
 *
 * Note: this function is significantly different from the JS version, as it
 * is written to match the blended images perfectly.
 *
 * Constraint: if (ref2 == target + (ref1 - target) * delta) for some fraction delta
 *              then (return == target + (given - target) * delta)
 *
 * Loose constraint: Preserve relative positions in saturation and luminance
 *                   space.
 */
function _color_shift($given, $ref1, $ref2, $target) {

  // We assume that ref2 is a blend of ref1 and target and find
  // delta based on the length of the difference vectors:

  // delta = 1 - |ref2 - ref1| / |white - ref1|
  $target = _color_unpack($target, true);
  $ref1 = _color_unpack($ref1, true);
  $ref2 = _color_unpack($ref2, true);
  $numerator = 0;
  $denominator = 0;
  for ($i = 0; $i < 3; ++$i) {
    $numerator += ($ref2[$i] - $ref1[$i]) * ($ref2[$i] - $ref1[$i]);
    $denominator += ($target[$i] - $ref1[$i]) * ($target[$i] - $ref1[$i]);
  }
  $delta = ($denominator > 0) ? (1 - sqrt($numerator / $denominator)) : 0;

  // Calculate the color that ref2 would be if the assumption was true.
  for ($i = 0; $i < 3; ++$i) {
    $ref3[$i] = $target[$i] + ($ref1[$i] - $target[$i]) * $delta;
  }

  // If the assumption is not true, there is a difference between ref2 and ref3.
  // We measure this in HSL space. Notation: x' = hsl(x).
  $ref2 = _color_rgb2hsl($ref2);
  $ref3 = _color_rgb2hsl($ref3);
  for ($i = 0; $i < 3; ++$i) {
    $shift[$i] = $ref2[$i] - $ref3[$i];
  }

  // Take the given color, and blend it towards the target.
  $given = _color_unpack($given, true);
  for ($i = 0; $i < 3; ++$i) {
    $result[$i] = $target[$i] + ($given[$i] - $target[$i]) * $delta;
  }

  // Finally, we apply the extra shift in HSL space.
  // Note: if ref2 is a pure blend of ref1 and target, then |shift| = 0.
  $result = _color_rgb2hsl($result);
  for ($i = 0; $i < 3; ++$i) {
    $result[$i] = min(1, max(0, $result[$i] + $shift[$i]));
  }
  $result = _color_hsl2rgb($result);

  // Return hex color.
  return _color_pack($result, true);
}

/**
 * Convert a hex triplet into a GD color.
 */
function _color_gd($img, $hex) {
  $c = array_merge(array($img), _color_unpack($hex));
  return call_user_func_array('imagecolorallocate', $c);
}

/**
 * Blend two hex colors and return the GD color.
 */
function _color_blend($img, $hex1, $hex2, $alpha) {
  $in1 = _color_unpack($hex1);
  $in2 = _color_unpack($hex2);
  $out = array($img);
  for ($i = 0; $i < 3; ++$i) {
    $out[] = $in1[$i] + ($in2[$i] - $in1[$i]) * $alpha;
  }
  return call_user_func_array('imagecolorallocate', $out);
}

/**
 * Convert a hex color into an RGB triplet.
 */
function _color_unpack($hex, $normalize = false) {
  if (strlen($hex) == 4) {
    $hex = $hex[1] . $hex[1] . $hex[2] . $hex[2] . $hex[3] . $hex[3];
  }
  $c = hexdec($hex);
  for ($i = 16; $i >= 0; $i -= 8) {
    $out[] = (($c >> $i) & 0xFF) / ($normalize ? 255 : 1);
  }
  return $out;
}

/**
 * Convert an RGB triplet to a hex color.
 */
function _color_pack($rgb, $normalize = false) {
  $out = 0;
  foreach ($rgb as $k => $v) {
    $out |= (($v * ($normalize ? 255 : 1)) << (16 - $k * 8));
  }
  return '#'. str_pad(dechex($out), 6, 0, STR_PAD_LEFT);
}

/**
 * Convert a HSL triplet into RGB
 */
function _color_hsl2rgb($hsl) {
  $h = $hsl[0];
  $s = $hsl[1];
  $l = $hsl[2];
  $m2 = ($l <= 0.5) ? $l * ($s + 1) : $l + $s - $l*$s;
  $m1 = $l * 2 - $m2;
  return array(
    _color_hue2rgb($m1, $m2, $h + 0.33333),
    _color_hue2rgb($m1, $m2, $h),
    _color_hue2rgb($m1, $m2, $h - 0.33333),
  );
}

/**
 * Helper function for _color_hsl2rgb().
 */
function _color_hue2rgb($m1, $m2, $h) {
  $h = ($h < 0) ? $h + 1 : (($h > 1) ? $h - 1 : $h);
  if ($h * 6 < 1) return $m1 + ($m2 - $m1) * $h * 6;
  if ($h * 2 < 1) return $m2;
  if ($h * 3 < 2) return $m1 + ($m2 - $m1) * (0.66666 - $h) * 6;
  return $m1;
}

/**
 * Convert an RGB triplet to HSL.
 */
function _color_rgb2hsl($rgb) {
  $r = $rgb[0];
  $g = $rgb[1];
  $b = $rgb[2];
  $min = min($r, min($g, $b));
  $max = max($r, max($g, $b));
  $delta = $max - $min;
  $l = ($min + $max) / 2;
  $s = 0;
  if ($l > 0 && $l < 1) {
    $s = $delta / ($l < 0.5 ? (2 * $l) : (2 - 2 * $l));
  }
  $h = 0;
  if ($delta > 0) {
    if ($max == $r && $max != $g) $h += ($g - $b) / $delta;
    if ($max == $g && $max != $b) $h += (2 + ($b - $r) / $delta);
    if ($max == $b && $max != $r) $h += (4 + ($r - $g) / $delta);
    $h /= 6;
  }
  return array($h, $s, $l);
}
